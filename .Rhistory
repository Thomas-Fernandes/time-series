p1_diff <- diff(p1, lag = 52)
eacf(p1_diff)
arma_model_diff <- auto.arima(p1_diff, seasonal = FALSE)
summary(arma_model_diff)
january_forecast_diff <- forecast(arma_model_diff, h=4)
kbl(january_forecast_diff, booktabs = TRUE) %>%
kable_styling(latex_options = c("hold_position"))
AIC(arma_model_diff)
df <- data.frame(
Modèle = character(0),
AIC = numeric(0),
MAE = numeric(0)
)
df <- rbind(df, data.frame(Modèle = "Modèle C", AIC = AIC(reg_modele), MAE = mean(abs(reg_modele$residuals))))
df <- rbind(df, data.frame(Modèle = "Modèle E", AIC = arma_xt$aic, MAE = mean(abs(arma_xt$residuals))))
df <- rbind(df, data.frame(Modèle = "Modèle F", AIC = sarima_Xt$aic))
df <- data.frame(
Modèle = character(0),
AIC = numeric(0),
MAE = numeric(0)
)
df <- rbind(df, data.frame(Modèle = "Modèle C", AIC = AIC(reg_modele), MAE = mean(abs(reg_modele$residuals))))
df <- rbind(df, data.frame(Modèle = "Modèle E", AIC = arma_xt$aic, MAE = mean(abs(arma_xt$residuals))))
df <- rbind(df, data.frame(Modèle = "Modèle F", AIC = sarima_Xt$aic, MAE = mean(abs(sarima_Xt$residuals))))
df <- rbind(df, data.frame(Modèle = "Modèle G", AIC = AIC(arma_model_diff), MAE = mean(abs(arma_model_diff$residuals))))
kable(df, booktabs = TRUE) %>%
kable_styling(latex_options = c("HOLD_position"))
arma_xt
summary(arma_xt)
set.seed(123)
x <- sim_sarima(n = 500,
model = list(ar = c(2, -2, 1),
ma = 1,
iorder = 1,
siorder = 1,
nseasons = 52,
sigma2 = 1))
plot(ts(x))
# Test de périodicité et stationnarité de Xt
acf(ts(x))
pacf(ts(x))
adf.test(x)
# Série différenciée de Xt, Xt - Xt-1
y <- diff(x,1)
plot(ts(y))
# Test de périodicité et stationnarité de Xt - Xt-1
acf(ts(y))
pacf(ts(y))
adf.test(y)
# Série Yt
model_z <- Arima(ts(rnorm(500), frequency = 52), order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1)))
z <- simulate(model_z, nsim = 500)
plot(ts(z))
acf(ts(z))
pacf(ts(z))
adf.test(z)
eacf(z)
modele_ar <- Arima(z, order = c(0, 0, 0))
modele_ma <- Arima(z, order = c(0, 0, 0))
modele_arma <- Arima(z, order = c(0, 0, 0))
forecast_1 <- forecast(model_arma, h = 1)
eacf(z)
modele_ar <- Arima(z, order = c(0, 0, 0))
modele_ma <- Arima(z, order = c(0, 0, 0))
modele_arma <- Arima(z, order = c(0, 0, 0))
forecast_1 <- forecast(modele_arma, h = 1)
forecast_2 <- forecast(modele_arma, h = 2)
print(forecast_1)
print(forecast_2)
forecast_1
forecast_2
n_simulations <- 999
n <- 500 # Longueur de la série temporelle
# Stocker les prévisions
forecasts_501 <- numeric(n_simulations)
forecasts_502 <- numeric(n_simulations)
# Boucle pour simuler et prévoir
for (i in 1:n_simulations) {
# Simuler une série temporelle AR(1)
simulated_series <- arima.sim(model = list(ar = c(phi)), n = n)
# Adapter un modèle AR(1) à la série simulée
fit <- Arima(simulated_series, order = c(1,0,0))
# Prévoir les deux prochaines valeurs
forecast <- forecast(fit, h = 2)
# Stocker les prévisions
forecasts_501[i] <- forecast$mean[1]
forecasts_502[i] <- forecast$mean[2]
}
phi
n_simulations <- 999
n <- 500 # Longueur de la série temporelle
# Stocker les prévisions
forecasts_501 <- numeric(n_simulations)
forecasts_502 <- numeric(n_simulations)
# Boucle pour simuler et prévoir
for (i in 1:n_simulations) {
# Simuler une série temporelle AR(1)
simulated_series <- arima.sim(model = list(ar = 1), n = n)
# Adapter un modèle AR(1) à la série simulée
fit <- Arima(simulated_series, order = c(1,0,0))
# Prévoir les deux prochaines valeurs
forecast <- forecast(fit, h = 2)
# Stocker les prévisions
forecasts_501[i] <- forecast$mean[1]
forecasts_502[i] <- forecast$mean[2]
}
n_simulations <- 999
n <- 500 # Longueur de la série temporelle
# Stocker les prévisions
forecasts_501 <- numeric(n_simulations)
forecasts_502 <- numeric(n_simulations)
# Boucle pour simuler et prévoir
for (i in 1:n_simulations) {
# Simuler une série temporelle AR(1)
simulated_series <- arima.sim(model = list(ar = c(-1)), n = n)
# Adapter un modèle AR(1) à la série simulée
fit <- Arima(simulated_series, order = c(1,0,0))
# Prévoir les deux prochaines valeurs
forecast <- forecast(fit, h = 2)
# Stocker les prévisions
forecasts_501[i] <- forecast$mean[1]
forecasts_502[i] <- forecast$mean[2]
}
diff_order <- 1
seasonal_diff_order <- 1
seasonal_period <- 52  # Supposons une saisonnalité hebdomadaire
Y_t <- diff(diff(x, differences = diff_order),
differences = seasonal_diff_order,
lag = seasonal_period)
# Estimation d'un modèle AR(1) sur Y_t
model_Y <- Arima(Y_t, order = c(1, 0, 0))
# Récupération du paramètre phi
phi <- model_Y$coef[1]
phi
plot(Y_t)
plot(ts(Y_t))
z
model_z
diff_order <- 1
seasonal_diff_order <- 1
seasonal_period <- 52
ts(Y_t) <- diff(diff(x, differences = diff_order),
differences = seasonal_diff_order,
lag = seasonal_period)
diff_order <- 1
seasonal_diff_order <- 1
seasonal_period <- 52
Y_t <- diff(diff(x, differences = diff_order),
differences = seasonal_diff_order,
lag = seasonal_period)
ts(Y_t)
model_Y <- Arima(Y_t, order = c(1, 0, 0))
phi <- model_Y$coef[1]
n_simulations <- 999
n <- 500
# Stocker les prévisions
forecasts_501 <- numeric(n_simulations)
forecasts_502 <- numeric(n_simulations)
# Boucle pour simuler et prévoir
for (i in 1:n_simulations) {
# Simuler une série temporelle AR(1)
simulated_series <- arima.sim(model = list(ar = c(-1)), n = n)
# Adapter un modèle AR(1) à la série simulée
fit <- Arima(simulated_series, order = c(1,0,0))
# Prévoir les deux prochaines valeurs
forecast <- forecast(fit, h = 2)
# Stocker les prévisions
forecasts_501[i] <- forecast$mean[1]
forecasts_502[i] <- forecast$mean[2]
}
diff_order <- 1
seasonal_diff_order <- 1
seasonal_period <- 52
Y_t <- diff(diff(x, differences = diff_order),
differences = seasonal_diff_order,
lag = seasonal_period)
model_Y <- Arima(Y_t, order = c(1, 0, 0))
phi <- model_Y$coef[1]
n_simulations <- 999
n <- 500
# Stocker les prévisions
forecasts_501 <- numeric(n_simulations)
forecasts_502 <- numeric(n_simulations)
# Boucle pour simuler et prévoir
for (i in 1:n_simulations) {
# Simuler une série temporelle AR(1)
simulated_series <- arima.sim(model = list(ar = c(-1)), n = n)
# Adapter un modèle AR(1) à la série simulée
fit <- Arima(simulated_series, order = c(1,0,0))
# Prévoir les deux prochaines valeurs
forecast <- forecast(fit, h = 2)
# Stocker les prévisions
forecasts_501[i] <- forecast$mean[1]
forecasts_502[i] <- forecast$mean[2]
}
diff_order <- 1
seasonal_diff_order <- 1
seasonal_period <- 52
Y_t <- diff(diff(x, differences = diff_order),
differences = seasonal_diff_order,
lag = seasonal_period)
model_Y <- Arima(Y_t, order = c(1, 0, 0))
phi <- model_Y$coef[1]
n_simulations <- 999
n <- 500
# Stocker les prévisions
forecasts_501 <- numeric(n_simulations)
forecasts_502 <- numeric(n_simulations)
# Boucle pour simuler et prévoir
for (i in 1:n_simulations) {
# Simuler une série temporelle AR(1)
simulated_series <- arima.sim(model = list(ar = c(phi)), n = n)
# Adapter un modèle AR(1) à la série simulée
fit <- Arima(simulated_series, order = c(1,0,0))
# Prévoir les deux prochaines valeurs
forecast <- forecast(fit, h = 2)
# Stocker les prévisions
forecasts_501[i] <- forecast$mean[1]
forecasts_502[i] <- forecast$mean[2]
}
# Calculer les moyennes et écart-types
mean_501 <- mean(forecasts_501)
mean_502 <- mean(forecasts_502)
sd_501 <- sd(forecasts_501)
sd_502 <- sd(forecasts_502)
# Tracer la distribution empirique
hist(forecasts_501, main = "Distribution des Prévisions pour Y_501", xlab = "Y_501")
hist(forecasts_502, main = "Distribution des Prévisions pour Y_502", xlab = "Y_502")
# Afficher les résultats
print(paste("Moyenne des prévisions pour Y_501:", mean_501, "et écart-type:", sd_501))
print(paste("Moyenne des prévisions pour Y_502:", mean_502, "et écart-type:", sd_502))
model_z$coef
model_z$coef[1]
model_Y
diff_ordre <- 1
diff_order_saison <- 1
periode <- 52
Y_t <- diff(diff(x, differences = diff_ordre),
differences = diff_order_saison,
lag = periode)
model_Y <- Arima(Y_t, order = c(1, 0, 0))
phi <- model_Y$coef[1]
n_simulations <- 999
n <- 500
forecasts_501 <- numeric(n_simulations)
forecasts_502 <- numeric(n_simulations)
for (i in 1:n_simulations) {
simulated_series <- arima.sim(model = list(ar = c(phi)), n = n)
fit <- Arima(simulated_series, order = c(1,0,0))
forecast <- forecast(fit, h = 2)
forecasts_501[i] <- forecast$mean[1]
forecasts_502[i] <- forecast$mean[2]
}
mean_501 <- mean(forecasts_501)
mean_502 <- mean(forecasts_502)
sd_501 <- sd(forecasts_501)
sd_502 <- sd(forecasts_502)
hist(forecasts_501, main = "Distribution des Prévisions pour Y_501", xlab = "Y_501")
hist(forecasts_502, main = "Distribution des Prévisions pour Y_502", xlab = "Y_502")
print(paste("Moyenne des prévisions pour Y_501:", mean_501, "et écart-type:", sd_501))
print(paste("Moyenne des prévisions pour Y_502:", mean_502, "et écart-type:", sd_502))
diff_ordre <- 1
diff_order_saison <- 1
periode <- 52
Y_t <- diff(diff(x, differences = diff_ordre),
differences = diff_order_saison,
lag = periode)
set.seed(123)
x <- sim_sarima(n = 500,
model = list(ar = c(2, -2, 1),
ma = 1,
iorder = 1,
siorder = 1,
nseasons = 52,
sigma2 = 1))
plot(ts(x))
# Test de périodicité et stationnarité de Xt
acf(ts(x))
pacf(ts(x))
adf.test(x)
# Série différenciée de Xt, Xt - Xt-1
y <- diff(x,1)
plot(ts(y))
# Test de périodicité et stationnarité de Xt - Xt-1
acf(ts(y))
pacf(ts(y))
adf.test(y)
# Série Yt
model_z <- Arima(ts(rnorm(500), frequency = 52), order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1)))
z <- simulate(model_z, nsim = 500)
plot(ts(z))
acf(ts(z))
pacf(ts(z))
adf.test(z)
diff_ordre <- 1
diff_order_saison <- 1
periode <- 52
Y_t <- diff(diff(x, differences = diff_ordre),
differences = diff_order_saison,
lag = periode)
model_Y <- Arima(Y_t, order = c(1, 0, 0))
phi <- model_Y$coef[1]
n_simulations <- 999
n <- 500
forecasts_501 <- numeric(n_simulations)
forecasts_502 <- numeric(n_simulations)
for (i in 1:n_simulations) {
series <- arima.sim(model = list(ar = c(phi)), n = n)
fit <- Arima(series, order = c(1,0,0))
forecast <- forecast(fit, h = 2)
forecasts_501[i] <- forecast$mean[1]
forecasts_502[i] <- forecast$mean[2]
}
mean_501 <- mean(forecasts_501)
mean_502 <- mean(forecasts_502)
sd_501 <- sd(forecasts_501)
sd_502 <- sd(forecasts_502)
hist(forecasts_501, main = "Distribution des Prévisions pour Y_501", xlab = "Y_501")
hist(forecasts_502, main = "Distribution des Prévisions pour Y_502", xlab = "Y_502")
print(paste("Moyenne des prévisions pour Y_501:", mean_501, "et écart-type:", sd_501))
print(paste("Moyenne des prévisions pour Y_502:", mean_502, "et écart-type:", sd_502))
knitr::opts_chunk$set(echo = TRUE)
library(tseries)
library(forecast)
library(kableExtra)
library(knitr)
library(sarima)
library(TSA)
set.seed(123)
a1 <- arima.sim(model = list(ma = 0.2), n = 200)
a2 <- arima.sim(model = list(ma = 0.2), n = 200)
a3 <- arima.sim(model = list(ma = 0.2), n = 200)
plot(a1, type="l", col="black", main="Trajectoires MA(1)",
xlab = "Temps", ylab = "Valeurs")
lines(a2, col="limegreen")
lines(a3, col="lightblue")
set.seed(123)
b1 <- arima.sim(model = list(ma = 1), n = 200)
b2 <- arima.sim(model = list(ma = 1), n = 200)
b3 <- arima.sim(model = list(ma = 1), n = 200)
plot(b1, type="l", col="black", main="Trajectoires MA(1)", xlab = "Temps", ylab = "Valeurs")
lines(b2, col="limegreen")
lines(b3, col="lightblue")
set.seed(123)
n <- 200
omega <- pi/40
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Temps', ylab = 'X_t', main = 'Trajectoires pour omega = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/2000
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Temps', ylab = 'X_t', main = 'Trajectoires pour omega = pi/2000')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
processus_d <- function(n) {
epsilon <- rnorm(n)
X <- rep(0, n)
delta2_X <- rep(0, n)
X[1] <- rnorm(1)
X[2] <- rnorm(1)
X[3] <- rnorm(1)
for (t in 4:n) {
X[t] <- 2*X[t-1] - X[t-2] + epsilon[t]
delta2_X[t] <- X[t-1] - 2*X[t-2] + X[t-3] + epsilon[t] - epsilon[t-1]
}
return(delta2_X)
}
n = 200
d1 <- processus_d(n)
d2 <- processus_d(n)
d3 <- processus_d(n)
plot(d1, type="l", col="black", main="Trajectoires", xlab="Temps", ylab="Valeurs")
lines(d2, col="limegreen")
lines(d3, col="lightblue")
set.seed(123)
e1 <- arima.sim(model = list(ma = 0.25, ar = 0.25), n = 200)
e2 <- arima.sim(model = list(ma = 0.25, ar = 0.25), n = 200)
e3 <- arima.sim(model = list(ma = 0.25, ar = 0.25), n = 200)
plot(e1, type="l", col="black", main="Trajectoires MA(1)", xlab = "Temps", ylab = "Valeurs")
lines(e2, col="limegreen")
lines(e3, col="lightblue")
source("prix.R")
plot(p1, type = "l", main = "Série Temporelle des Prix", xlab = "Temps", ylab = "Prix")
acf(p1)
pacf(p1)
spectrum(p1)
p1_decomp <- decompose(p1)
plot(p1_decomp)
T <- 52
t <- 1:length(p1)
sin_terme <- sin(2 * pi * t / T)
cos_terme <- cos(2 * pi * t / T)
reg_modele <- lm(p1 ~ sin_terme + cos_terme)
m <- coef(reg_modele)[1]
A <- coef(reg_modele)[2]
B <- coef(reg_modele)[3]
Zt <- reg_modele$residuals - mean(reg_modele$residuals)
adf_test <- adf.test(Zt)
summary(reg_modele)
adf_test
acf(Zt)
pacf(Zt)
Box.test(Zt, type = "Ljung-Box")
ordres <- expand.grid(ar = 0:4, ma = 0:6)[-1, ]
modeles <- list()
for (i in seq(nrow(ordres))) {
modeles[[i]] <- Arima(Zt, order = c(ordres[i, "ar"], 0, ordres[i, "ma"]))
}
resultats <- data.frame(AR = rep(NA, nrow(ordres)),
MA = rep(NA, nrow(ordres)),
AIC = rep(NA, nrow(ordres)),
stringsAsFactors = FALSE)
for (i in seq(nrow(ordres))) {
model <- modeles[[i]]
coefs <- model$coef
se_coefs <- sqrt(diag(vcov(model)))
t.values <- abs(coefs / se_coefs)
compteur_t.values <- sum(t.values < 1.96) - 1
resultats[i, "AR"] <- ordres[i, "ar"]
resultats[i, "MA"] <- ordres[i, "ma"]
resultats[i, "AIC"] <- AIC(model)
resultats[i, "t.value non significatives"] <- compteur_t.values
}
kable(resultats, booktabs = TRUE) %>%
kable_styling(latex_options = c("HOLD_position"))
arma_xt <- Arima(Zt, order=c(1,0,3))
Zt_forecast <- forecast(arma_xt, h=4)
t_future <- length(p1) + 1:length(Zt_forecast$mean)
sin_term_future <- sin(2 * pi * t_future / 52)
cos_term_future <- cos(2 * pi * t_future / 52)
Xt_future <- m + A * sin_term_future + B * cos_term_future + Zt_forecast$mean
Xt_future
time_future <- seq(max(time(p1)), by = 1/52, length.out = 4)
plot(p1, main = "Données originales avec prédictions", xlab = "Temps", ylab = "Valeurs", type = "l")
points(time_future, Xt_future, col = "blue", pch = 19)
lines(time_future, Xt_future, col = "red", lty = 2)
legend("topleft", legend = c("Originale", "Prédictions"), col = c("black", "blue"), pch = c(NA, 19), lty = c(1, NA))
sarima_Xt <- auto.arima(p1)
summary(sarima_Xt)
january_forecast <- forecast(sarima_Xt, h=4)
january_forecast
p1_diff <- diff(p1, lag = 52)
eacf(p1_diff)
arma_model_diff <- auto.arima(p1_diff, seasonal = FALSE)
summary(arma_model_diff)
january_forecast_diff <- forecast(arma_model_diff, h=4)
kbl(january_forecast_diff, booktabs = TRUE) %>%
kable_styling(latex_options = c("hold_position"))
AIC(arma_model_diff)
df <- data.frame(
Modèle = character(0),
AIC = numeric(0),
MAE = numeric(0)
)
df <- rbind(df, data.frame(Modèle = "Modèle C", AIC = AIC(reg_modele), MAE = mean(abs(reg_modele$residuals))))
df <- rbind(df, data.frame(Modèle = "Modèle E", AIC = arma_xt$aic, MAE = mean(abs(arma_xt$residuals))))
df <- rbind(df, data.frame(Modèle = "Modèle F", AIC = sarima_Xt$aic, MAE = mean(abs(sarima_Xt$residuals))))
df <- rbind(df, data.frame(Modèle = "Modèle G", AIC = AIC(arma_model_diff), MAE = mean(abs(arma_model_diff$residuals))))
kable(df, booktabs = TRUE) %>%
kable_styling(latex_options = c("HOLD_position"))
set.seed(123)
x <- sim_sarima(n = 500,
model = list(ar = c(2, -2, 1),
ma = 1,
iorder = 1,
siorder = 1,
nseasons = 52,
sigma2 = 1))
plot(ts(x))
# Test de périodicité et stationnarité de Xt
acf(ts(x))
pacf(ts(x))
adf.test(x)
# Série différenciée de Xt, Xt - Xt-1
y <- diff(x,1)
plot(ts(y))
# Test de périodicité et stationnarité de Xt - Xt-1
acf(ts(y))
pacf(ts(y))
adf.test(y)
# Série Yt
model_z <- Arima(ts(rnorm(500), frequency = 52), order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1)))
z <- simulate(model_z, nsim = 500)
plot(ts(z))
acf(ts(z))
pacf(ts(z))
adf.test(z)
eacf(z)
modele_ar <- Arima(z, order = c(0, 0, 0))
modele_ma <- Arima(z, order = c(0, 0, 0))
modele_arma <- Arima(z, order = c(0, 0, 0))
forecast_1 <- forecast(modele_arma, h = 1)
forecast_2 <- forecast(modele_arma, h = 2)
print(forecast_1)
print(forecast_2)
