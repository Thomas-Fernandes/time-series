# Créer un dataframe de test avec des labels dans les en-têtes
data <- data.frame(
"Nom" = c("Alice", "Bob", "Charlie"),
"Âge" = c(25, 30, 35),
"Score" = c(95, 87, 92)
)
# Afficher le dataframe
print(data)
View(data)
# Créer un dataframe de test
data <- data.frame(
"Nom" = c("Alice", "Bob", "Charlie"),
"Âge" = c(25, 30, 35),
"Score" = c(95, 87, 92)
)
# Ajouter des labels aux en-têtes
colnames(data) <- c("Prénom", "Année de naissance", "Points")
# Afficher le dataframe avec les labels d'en-tête
print(data)
install.packages("tinytex")
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)  # Pour la reproductibilité
n <- 200  # Taille des trajectoires
t <- 1:n  # Temps
# Fonction pour générer une trajectoire du processus
generate_trajectory <- function(n) {
epsilon <- rnorm(n, mean = 0, sd = 1)  # Bruit blanc
X <- numeric(n)
X[1] <- sin(1) + epsilon[1]
for (i in 2:n) {
X[i] <- sin(i) + epsilon[i] - 0.2 * epsilon[i - 1]
}
return(X)
}
# Générer trois trajectoires
X1 <- generate_trajectory(n)
X2 <- generate_trajectory(n)
X3 <- generate_trajectory(n)
# Création d'un data.frame pour ggplot
data <- data.frame(Time = rep(t, 3),
Series = c(X1, X2, X3),
Trajectory = factor(rep(1:3, each = n)))
# Tracer les trois trajectoires
ggplot(data, aes(x = Time, y = Series, color = Trajectory)) +
geom_line() +
theme_minimal() +
labs(title = "Trois trajectoires du processus X_t",
x = "Temps",
y = "Valeur de la série",
color = "Trajectoire")
library(ggplot2)
set.seed(123)  # Pour la reproductibilité
n <- 200  # Taille des trajectoires
t <- 1:n  # Temps
# Fonction pour générer une trajectoire du processus
generate_trajectory <- function(n) {
epsilon <- rnorm(n, mean = 0, sd = 1)  # Bruit blanc
X <- numeric(n)
X[1] <- sin(1) + epsilon[1]
for (i in 2:n) {
X[i] <- sin(i) + epsilon[i] - 0.2 * epsilon[i - 1]
}
return(X)
}
# Générer trois trajectoires
X1 <- generate_trajectory(n)
X2 <- generate_trajectory(n)
X3 <- generate_trajectory(n)
# Création d'un data.frame pour ggplot
data <- data.frame(Time = rep(t, 3),
Series = c(X1, X2, X3),
Trajectory = factor(rep(1:3, each = n)))
# Tracer les trois trajectoires
ggplot(data, aes(x = Time, y = Series, color = Trajectory)) +
geom_line() +
theme_minimal() +
labs(title = "Trois trajectoires du processus X_t",
x = "Temps",
y = "Valeur de la série",
color = "Trajectoire")
n <- 200  # Taille des trajectoires
# Fonction pour générer une trajectoire du processus
generate_trajectory <- function(n) {
epsilon <- rnorm(n)  # Générer le bruit blanc
X <- rep(0, n)
for (t in 2:n) {
X[t] <- sin(t) + epsilon[t] - 0.2 * epsilon[t - 1]
}
return(X)
}
# Générer trois trajectoires
X1 <- generate_trajectory(n)
X2 <- generate_trajectory(n)
X3 <- generate_trajectory(n)
# Tracer les trajectoires
plot(X1, type = "l", col = "red", ylim = range(c(X1, X2, X3)), ylab = "X_t", xlab = "t")
lines(X2, col = "blue")
lines(X3, col = "green")
n <- 200  # Taille des trajectoires
# Fonction pour générer une trajectoire du processus
generate_trajectory <- function(n) {
epsilon <- rnorm(n)  # Générer le bruit blanc
X <- rep(0, n)
for (t in 2:n) {
X[t] <- sin(t) + epsilon[t] - 0.2 * epsilon[t - 1]
}
return(X)
}
# Générer trois trajectoires
X1 <- generate_trajectory(n)
X2 <- generate_trajectory(n)
X3 <- generate_trajectory(n)
# Tracer les trajectoires
plot(X1, type = "l", col = "black", ylim = range(c(X1, X2, X3)), ylab = "X_t", xlab = "t")
lines(X2, col = "black")
lines(X3, col = "black")
set.seed(123)
n <- 200  # Taille des trajectoires
# Fonction pour générer une trajectoire du processus
trajectoire_a <- function(n) {
epsilon <- rnorm(n)  # Générer le bruit blanc
X <- rep(0, n)
for (t in 2:n) {
X[t] <- sin(t) + epsilon[t] - 0.2 * epsilon[t - 1]
}
return(X)
}
# Générer trois trajectoires
X1 <- trajectoire_a(n)
X2 <- trajectoire_a(n)
X3 <- trajectoire_a(n)
# Tracer les trajectoires
plot(X1, type = "l", col = "black", ylim = range(c(X1, X2, X3)), ylab = "X_t", xlab = "t")
lines(X2, col = "black")
lines(X3, col = "black")
setwd("D:/Documents/GitHub/time-series")
knitr::opts_chunk$set(echo = TRUE)
source("prix.R")
serie_prix <- p1
plot(serie_prix, type = "l", main = "Série Temporelle des Prix", xlab = "Temps", ylab = "Prix")
gc()
source("prix.R")
plot(p1, type = "l", main = "Série Temporelle des Prix", xlab = "Temps", ylab = "Prix")
acf(p1)
pacf(p1)
acf(p1)
pacf(p1)
spectrum(p1)
decompose(p1)
acf(p1)
pacf(p1)
spectrum(p1)
p1_decomp <- decompose(p1)
plot(p1_decomp)
acf(p2)
pacf(p1)
spectrum(p1)
p1_decomp <- decompose(p1)
plot(p1_decomp)
acf(p4)
pacf(p1)
spectrum(p1)
p1_decomp <- decompose(p1)
plot(p1_decomp)
acf(p1)
pacf(p1)
spectrum(p1)
p1_decomp <- decompose(p1)
plot(p1_decomp)
X <- data.frame(
intercept = 1,
sin_t = sin(2*pi*t / 52),
cos_t = cos(2*pi*t / 52)
)
print(pi)
t <- seq(0, length(p1)-1)
X <- data.frame(
intercept = 1,
sin_t = sin(2*pi*t / 52),
cos_t = cos(2*pi*t / 52)
)
model <- lm(p1 ~ ., data = X)
coefs <- coef(model)
cat("Estimates:\n", paste("m:", round(coefs["(Intercept)",], 3), "\n",
"A:", round(coefs["sin_t",], 3), "\n",
"B:", round(coefs["cos_t",], 3), "\n"))
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
n <- 200
trajectoire_a <- function(n) {
epsilon <- rnorm(n)
X <- rep(0, n)
for (t in 2:n) {
X[t] <- sin(t) + epsilon[t] - 0.2 * epsilon[t - 1]
}
return(X)
}
X1 <- trajectoire_a(n)
X2 <- trajectoire_a(n)
X3 <- trajectoire_a(n)
plot(X1, type = "l", ylim = range(c(X1, X2, X3)), ylab = "X_t", xlab = "t")
lines(X2)
lines(X3)
source("prix.R")
plot(p1, type = "l", main = "Série Temporelle des Prix", xlab = "Temps", ylab = "Prix")
acf(p1)
pacf(p1)
spectrum(p1)
p1_decomp <- decompose(p1)
plot(p1_decomp)
# Charger les données de prix
source("prix.R")
# Créer un vecteur de temps
t <- 1:520
# Spécifier le modèle de régression linéaire
model <- lm(formula = prix ~ 1 + sin(2*pi*t/T) + cos(2*pi*t/T))
# Charger les données de prix
source("prix.R")
# Créer un vecteur de temps
t <- 1:520
# Spécifier le modèle de régression linéaire
model <- lm(formula = p1 ~ 1 + sin(2*pi*t/T) + cos(2*pi*t/T))
# Obtenir les coefficients estimés
m <- coef(model)[1]
A <- coef(model)[2]
B <- coef(model)[3]
# Afficher les résultats
cat("Valeur de m:", m, "\n")
cat("Valeur de A:", A, "\n")
cat("Valeur de B:", B, "\n")
